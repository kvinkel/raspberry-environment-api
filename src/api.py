import time
import threading
import database
import math
from fastapi import FastAPI
from fastapi.responses import PlainTextResponse, HTMLResponse

try:
    from smbus2 import SMBus
except ImportError:
    from smbus import SMBus
from bme280 import BME280
from sgp30 import SGP30

app = FastAPI()
smbus = SMBus(1)
bme280 = BME280(i2c_dev=smbus)
lock = threading.Lock()
eco2, tvoc = 0, 0


def get_cpu_temp():
    file = open('/sys/class/thermal/thermal_zone0/temp')
    cpu_temp = file.readline().strip()
    file.close()
    return float(cpu_temp) / 1000


# Formula source: https://carnotcycle.wordpress.com/2012/08/04/how-to-convert-relative-humidity-to-absolute-humidity/
# Within 0.1% accuracy over temperature range –30°C to +35°C
def calculate_absolute_humidity(temp, relative_hum):
    return (6.112 * pow(math.e, (17.67 * temp) / (temp + 243.5)) * relative_hum * 2.1674) / (273.15 + temp)  # g/m³


# Humidity compensation info: SGP30 datasheet page 8/15
def convert_absolute_humidity(absolute_hum):
    fractional, integer = math.modf(absolute_hum)
    bef = int(integer)
    aft = round(fractional * 256)
    if bef > 255:
        return 0
    if aft > 255:
        aft = 255
    hum_hex = '0x{:02X}'.format(bef) + '{:02X}'.format(aft)
    return int(hum_hex, 0)


# measure_air_quality command sent regularly for better baseline compensation
def start_sgp30(lock):
    sgp30 = SGP30()
    sgp30.start_measurement()
    global eco2, tvoc
    counter = 0
    while True:
        with lock:
            eco2, tvoc = sgp30.command('measure_air_quality')
        counter += 1
        if counter == 600:
            counter = 0
            absolute_hum = calculate_absolute_humidity(bme280.get_temperature(), bme280.get_humidity())
            sgp30.command('set_humidity', (convert_absolute_humidity(absolute_hum),))
        time.sleep(1)


def start_data_save():
    time.sleep(60)  # Wait for sgp30 to warm up
    sgp = SGP30()
    while True:
        temp = bme280.get_temperature()
        hum = bme280.get_humidity()
        pres = bme280.get_pressure()
        cpu_temp = get_cpu_temp()
        with lock:
            t = tvoc
            e = eco2
        database.add_sensor_data(temp, hum, pres, t, e, cpu_temp)
        time.sleep(3600)
        eco2_base, tvoc_base = sgp.command('get_baseline')
        database.set_baseline(eco2_base, tvoc_base)


@app.get('/', response_class=HTMLResponse)
def get_endpoint_descriptions():
    return '''
<html>
<head>
    <title>Raspberry Environment aPi</title>
    <style>li {font-weight: bold; text-decoration: underline; color: darkslategray;} li:hover {cursor: pointer;}</style>
</head>
<body>
    <h3>Endpoints:</h3>
    <ul type="square">
        <li onclick="location.href = window.location.href + 'docs'">/docs</li>
        <p>Autogenerated API documentation</p>
        <li onclick="location.href = window.location.href + 'sensors'">/sensors</li>
        <p>
            Readings from the sensors: Temperature in degrees Celsius (°C), relative humidity percentage (%),
            pressure in hectopascal pressure units (hPa),
            CO2 in parts-per million from 400-60,000 (ppm), total volatile organic compounds in parts-per billion
            0-60,000 (TVOC in ppb), and CPU temperature in degrees Celsius (°C).
        </p>
        <li onclick="location.href = window.location.href + 'average'">/average</li>
        <p>The average of all readings saved in the database.</p>
        <li onclick="location.href = window.location.href + 'min-max'">/min-max</li>
        <p>The minimum and maximum values for all sensor readings saved in the database.</p>
        <li onclick="location.href = window.location.href + 'measurement-info'">/measurement-info</li>
        <p>The timestamp for the first and the latest sensor reading saved in the database along with the number of total readings saved.</p>
        <li onclick="location.href = window.location.href + 'temperature'">/temperature</li>
        <p>The temperature in degrees Celsius (°C).</p>
        <li onclick="location.href = window.location.href + 'humidity'">/humidity</li>
        <p>The relative humidity percentage (%).</p>
        <li onclick="location.href = window.location.href + 'pressure'">/pressure</li>
        <p>The pressure in hectopascal pressure units (hPa).</p>
        <li onclick="location.href = window.location.href + 'tvoc'">/tvoc</li>
        <p>The total volatile organic compounds in parts-per billion (TVOC in ppb).</p>
        <li onclick="location.href = window.location.href + 'eco2'">/eco2</li>
        <p>CO2 value in parts-per million (ppm).</p>
        <li onclick="location.href = window.location.href + 'cpu-temp'">/cpu-temp</li>
        <p>The CPU temperature of the Raspberry Pi in degrees Celsius (°C).</p>
    </ul>
</body>
</html>'''


@app.get('/sensors')
def get_sensor_values():
    temperature = bme280.get_temperature()
    humidity = bme280.get_humidity()
    pressure = bme280.get_pressure()
    cpu_temp = get_cpu_temp()
    with lock:
        sensor_values = {
            "temperature": temperature,
            "humidity": humidity,
            "pressure": pressure,
            "eco2": eco2,
            "tvoc": tvoc,
            "cpu_temp": cpu_temp
        }
    return sensor_values


@app.get('/average')
def get_average():
    return database.get_avg_data()


@app.get('/min-max')
def get_min_max():
    return database.get_min_max()


@app.get('/measurement-info')
def get_measurement_info():
    return database.get_measurement_info()


@app.get('/temperature', response_class=PlainTextResponse)
def get_temperature():
    return str(bme280.get_temperature())


@app.get('/humidity', response_class=PlainTextResponse)
def get_humidity():
    return str(bme280.get_humidity())


@app.get('/pressure', response_class=PlainTextResponse)
def get_pressure():
    return str(bme280.get_pressure())


@app.get('/tvoc', response_class=PlainTextResponse)
def get_tvoc():
    return str(tvoc)


@app.get('/eco2', response_class=PlainTextResponse)
def get_eco2():
    return str(eco2)


@app.get('/cpu-temp', response_class=PlainTextResponse)
def get_cpu():
    return str(get_cpu_temp())


def set_sgp30_baseline():
    sg = SGP30()
    eco2_base, tvoc_base = database.get_baseline()
    if eco2_base != 0:
        sg.command('set_baseline', (eco2_base, tvoc_base))


# Discard first reading from bme280 because it's inaccurate
bme280.get_temperature()
bme280.get_humidity()
bme280.get_pressure()
database.set_up()
set_sgp30_baseline()
t1 = threading.Thread(target=start_sgp30, args=(lock,))
t1.setDaemon(True)
t1.start()
t2 = threading.Thread(target=start_data_save)
t2.setDaemon(True)
t2.start()
